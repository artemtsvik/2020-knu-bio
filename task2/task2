Implement Hamming distance via Inner Product between two binary vectors (-1, 1)
To calculate Hamming distance via Inner Product we need to work with (-1, 1) instead of (0, 1).
Please print result after each step

Example: 
We have two binary biometric vectors (from fingerpring or iriscode) include (-1, 1) values.
v1 = [1, -1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, -1, -1, -1, -1]
v2 = [-1, -1, 1, -1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, -1, -1]

Hamming distance = 0.25  (25% of bits is not the same)

1. Create jupyter file
2. Generate two random vectors v1 and v2 with length 16
3. Create "hamming_distance" function
4. Use "hamming_distance" function to calculate distance between v1 and v2
